import readlineSync from 'readline-sync';
import colors from 'colors';
import OpenaiService from '../services/OpenaiService.js';

/**
 * Class representing the controller for the chat functionality.
 */
class ChatController {
  /**
   * Constructs an instance of the ChatController.
   */
  constructor() {
    /**
     * The chat history that keeps track of user and assistant interactions.
     * @type {Array<Array<string, string>>}
     */
    this.chatHistory = [];
  }

  /**
   * Initiates and handles the chat interaction with the user.
   *
   * @async
   * @returns {Promise<void>}
   */
  async handleChat() {
    console.log(colors.bold.green(
      "Welcome to Diagnosy! My name is Daisy. How are you feeling today?"
    ));

    /**
     * The initial system message describing the role of the bot.
     * @type {string}
     */
    const systemMessage = "Your name is Daisy. You are a Symptom and Diagnosis Guidance bot. You provide preliminary medical diagnoses and advice to patients based on their symptoms and help them schedule an appointment with a medical professional. If needed, I can help you schedule an appointment with a medical practitioner. Would you like assistance with that";

    this.chatHistory.push(["system", systemMessage]);

    while (true) {
      /**
       * The user's input in the chat.
       * @type {string}
       */
      const userInput = readlineSync.question(colors.red("You: "));
      try {
        /**
         * Array of messages including the chat history and the current user input.
         * @type {Array<{role: string, content: string}>}
         */
        const messages = this.chatHistory.map(([role, content]) => ({
          role,
          content
        }));
        messages.push({ role: "user", content: userInput });

        /**
         * The completion text generated by the OpenaiService based on the chat history.
         * @type {string}
         */
        const completionText = await OpenaiService.getChatbotCompletion(messages);

        if (this.shouldExit(userInput)) {
          console.log(colors.green("Daisy: Exiting chat. Goodbye!"));
          await OpenaiService.saveChatHistory(this.chatHistory);
          return;
        }

        console.log(colors.green("Daisy ") + completionText);

        this.chatHistory.push(["user", userInput]);
        this.chatHistory.push(["assistant", completionText]);
      } catch (error) {
        console.error(colors.red(error));
      }
    }
  }

  /**
   * Checks if the user wants to exit the chat based on their input.
   *
   * @param {string} userInput - The user's input.
   * @returns {boolean} - True if the user wants to exit, otherwise false.
   */
  shouldExit(userInput) {
    return userInput.toLowerCase() === "exit";
  }
}

export default ChatController;

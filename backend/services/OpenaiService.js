import dbClient from "../storage/db";
import OpenAI from "openai";
import dotenv from "dotenv";

/**
 * Loads environment variables from the .env file.
 */
dotenv.config();

/**
 * Class representing the OpenAI Service.
 */
class OpenaiService {
  /**
   * Creates an instance of the OpenaiService.
   * Initializes the OpenAI client with the API key.
   */
  constructor() {
    /**
     * Retrieves the OpenAI API key from the environment variables.
     *
     * @type {string}
     */
    const apiKey = process.env.OPENAI_API_KEY;

    /**
     * Throws an error if the OpenAI API key is missing.
     */
    if (!apiKey) {
      throw Error("OPENAI key missing");
    }

    /**
     * Creates a new instance of the OpenAI client.
     *
     * @type {Object}
     */
    this.openai = new OpenAI({ apiKey: apiKey });
  }

  /**
   * Generates a completion for the chatbot based on the provided chat history.
   *
   * @async
   * @param {Array} chatHistory - The chat history array.
   * @returns {Promise<string>} - The completion text generated by the chatbot.
   */
  async getChatbotCompletion(chatHistory) {
    try {
      /**
       * Calls the OpenAI API to generate a chatbot completion.
       *
       * @type {Object}
       */
      const completion = await this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: chatHistory,
      });

      /**
       * Returns the content of the generated completion.
       */
      return completion.choices[0].message.content;
    } catch (error) {
      console.error("Error interacting with OpenAI");
      throw error;
    }
  }
}

/**
 * Creates a singleton instance of the OpenaiService.
 */
export default new OpenaiService();
